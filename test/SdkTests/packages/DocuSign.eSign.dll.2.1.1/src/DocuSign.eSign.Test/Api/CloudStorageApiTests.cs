/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocuSign.eSign.Client;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Test
{
    /// <summary>
    ///  Class for testing CloudStorageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CloudStorageApiTests
    {
        private CloudStorageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CloudStorageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CloudStorageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CloudStorageApi
            //Assert.IsInstanceOfType(typeof(CloudStorageApi), instance, "instance is a CloudStorageApi");
        }

        
        /// <summary>
        /// Test CreateProvider
        /// </summary>
        [Test]
        public void CreateProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //CloudStorageProviders cloudStorageProviders = null;
            //var response = instance.CreateProvider(accountId, userId, cloudStorageProviders);
            //Assert.IsInstanceOf<CloudStorageProviders> (response, "response is CloudStorageProviders");
        }
        
        /// <summary>
        /// Test DeleteProvider
        /// </summary>
        [Test]
        public void DeleteProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string serviceId = null;
            //string userId = null;
            //var response = instance.DeleteProvider(accountId, serviceId, userId);
            //Assert.IsInstanceOf<CloudStorageProviders> (response, "response is CloudStorageProviders");
        }
        
        /// <summary>
        /// Test DeleteProviders
        /// </summary>
        [Test]
        public void DeleteProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //CloudStorageProviders cloudStorageProviders = null;
            //var response = instance.DeleteProviders(accountId, userId, cloudStorageProviders);
            //Assert.IsInstanceOf<CloudStorageProviders> (response, "response is CloudStorageProviders");
        }
        
        /// <summary>
        /// Test GetProvider
        /// </summary>
        [Test]
        public void GetProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string serviceId = null;
            //string userId = null;
            //string redirectUrl = null;
            //var response = instance.GetProvider(accountId, serviceId, userId, redirectUrl);
            //Assert.IsInstanceOf<CloudStorageProviders> (response, "response is CloudStorageProviders");
        }
        
        /// <summary>
        /// Test List
        /// </summary>
        [Test]
        public void ListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string folderId = null;
            //string serviceId = null;
            //string userId = null;
            //string cloudStorageFolderPath = null;
            //string count = null;
            //string order = null;
            //string orderBy = null;
            //string searchText = null;
            //string startPosition = null;
            //var response = instance.List(accountId, folderId, serviceId, userId, cloudStorageFolderPath, count, order, orderBy, searchText, startPosition);
            //Assert.IsInstanceOf<ExternalFolder> (response, "response is ExternalFolder");
        }
        
        /// <summary>
        /// Test ListFolders
        /// </summary>
        [Test]
        public void ListFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string serviceId = null;
            //string userId = null;
            //string cloudStorageFolderPath = null;
            //string count = null;
            //string order = null;
            //string orderBy = null;
            //string searchText = null;
            //string startPosition = null;
            //var response = instance.ListFolders(accountId, serviceId, userId, cloudStorageFolderPath, count, order, orderBy, searchText, startPosition);
            //Assert.IsInstanceOf<ExternalFolder> (response, "response is ExternalFolder");
        }
        
        /// <summary>
        /// Test ListProviders
        /// </summary>
        [Test]
        public void ListProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string redirectUrl = null;
            //var response = instance.ListProviders(accountId, userId, redirectUrl);
            //Assert.IsInstanceOf<CloudStorageProviders> (response, "response is CloudStorageProviders");
        }
        
    }

}
